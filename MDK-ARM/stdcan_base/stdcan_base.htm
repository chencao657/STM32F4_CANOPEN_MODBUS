<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stdcan_base\stdcan_base.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stdcan_base\stdcan_base.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 26 17:17:38 2025
<BR><P>
<H3>Maximum Stack Usage =        460 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">CO_HBcons_receive</a> from co_hbconsumer.o(i.CO_HBcons_receive) referenced from co_hbconsumer.o(i.CO_HBconsumer_initEntry)
 <LI><a href="#[66]">CO_LSSslave_receive</a> from co_lssslave.o(i.CO_LSSslave_receive) referenced from co_lssslave.o(i.CO_LSSslave_init)
 <LI><a href="#[68]">CO_NMT_receive</a> from co_nmt_heartbeat.o(i.CO_NMT_receive) referenced from co_nmt_heartbeat.o(i.CO_NMT_init)
 <LI><a href="#[69]">CO_PDO_receive</a> from co_pdo.o(i.CO_PDO_receive) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[69]">CO_PDO_receive</a> from co_pdo.o(i.CO_PDO_receive) referenced from co_pdo.o(i.OD_write_14xx)
 <LI><a href="#[6f]">CO_SDO_receive</a> from co_sdoserver.o(i.CO_SDO_receive) referenced from co_sdoserver.o(i.CO_SDOserver_init_canRxTx)
 <LI><a href="#[6d]">CO_SDOclient_receive</a> from co_sdoclient.o(i.CO_SDOclient_receive) referenced from co_sdoclient.o(i.CO_SDOclient_setup)
 <LI><a href="#[72]">CO_SYNC_receive</a> from co_sync.o(i.CO_SYNC_receive) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[72]">CO_SYNC_receive</a> from co_sync.o(i.CO_SYNC_receive) referenced from co_sync.o(i.OD_write_1005)
 <LI><a href="#[74]">CO_TIME_receive</a> from co_time.o(i.CO_TIME_receive) referenced from co_time.o(i.CO_TIME_init)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">MODS_RxTimeOut</a> from modbus_slave.o(i.MODS_RxTimeOut) referenced from modbus_slave.o(i.MODS_ReciveNew)
 <LI><a href="#[80]">MX_CAN1_Init</a> from can.o(i.MX_CAN1_Init) referenced from main.o(i.main)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">OD_readDisabled</a> from co_odinterface.o(i.OD_readDisabled) referenced from co_odinterface.o(i.OD_getSub)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_hbconsumer.o(i.CO_HBconsumer_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_nmt_heartbeat.o(i.CO_NMT_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_sdoserver.o(i.CO_SDOserver_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_time.o(i.CO_TIME_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[63]">OD_readOriginal</a> from co_odinterface.o(i.OD_readOriginal) referenced from co_odinterface.o(i.OD_getSub)
 <LI><a href="#[61]">OD_read_1003</a> from co_emergency.o(i.OD_read_1003) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[5f]">OD_read_1014_default</a> from co_emergency.o(i.OD_read_1014_default) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[6a]">OD_read_PDO_commParam</a> from co_pdo.o(i.OD_read_PDO_commParam) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[6a]">OD_read_PDO_commParam</a> from co_pdo.o(i.OD_read_PDO_commParam) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[7a]">OD_read_dummy</a> from co_pdo.o(i.OD_read_dummy) referenced from co_pdo.o(i.PDOconfigMap)
 <LI><a href="#[79]">OD_writeDisabled</a> from co_odinterface.o(i.OD_writeDisabled) referenced from co_odinterface.o(i.OD_getSub)
 <LI><a href="#[60]">OD_writeOriginal</a> from co_odinterface.o(i.OD_writeOriginal) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[60]">OD_writeOriginal</a> from co_odinterface.o(i.OD_writeOriginal) referenced from co_odinterface.o(i.OD_getSub)
 <LI><a href="#[62]">OD_write_1003</a> from co_emergency.o(i.OD_write_1003) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[70]">OD_write_1005</a> from co_sync.o(i.OD_write_1005) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[73]">OD_write_1012</a> from co_time.o(i.OD_write_1012) referenced from co_time.o(i.CO_TIME_init)
 <LI><a href="#[64]">OD_write_1016</a> from co_hbconsumer.o(i.OD_write_1016) referenced from co_hbconsumer.o(i.CO_HBconsumer_init)
 <LI><a href="#[67]">OD_write_1017</a> from co_nmt_heartbeat.o(i.OD_write_1017) referenced from co_nmt_heartbeat.o(i.CO_NMT_init)
 <LI><a href="#[71]">OD_write_1019</a> from co_sync.o(i.OD_write_1019) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[6e]">OD_write_1201_additional</a> from co_sdoserver.o(i.OD_write_1201_additional) referenced from co_sdoserver.o(i.CO_SDOserver_init)
 <LI><a href="#[6b]">OD_write_14xx</a> from co_pdo.o(i.OD_write_14xx) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[75]">OD_write_18xx</a> from co_pdo.o(i.OD_write_18xx) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[6c]">OD_write_PDO_mapping</a> from co_pdo.o(i.OD_write_PDO_mapping) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[6c]">OD_write_PDO_mapping</a> from co_pdo.o(i.OD_write_PDO_mapping) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[7b]">OD_write_dummy</a> from co_pdo.o(i.OD_write_dummy) referenced from co_pdo.o(i.PDOconfigMap)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7e]">RS485_ReciveNew</a> from modbus_usart.o(i.RS485_ReciveNew) referenced from modbus_usart.o(i.UartVarInit)
 <LI><a href="#[7c]">RS485_SendBefor</a> from modbus_usart.o(i.RS485_SendBefor) referenced from modbus_usart.o(i.UartVarInit)
 <LI><a href="#[7d]">RS485_SendOver</a> from modbus_usart.o(i.RS485_SendOver) referenced from modbus_usart.o(i.UartVarInit)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from modbus_tim.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from modbus_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[7f]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[81]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18f]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_readOriginal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_receive
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1017
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1003
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1003
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_dummy
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_04H
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[187]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[89]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[195]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[196]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[197]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>BEBufToUint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user_lib.o(i.BEBufToUint16))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_10H
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_05H
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_04H
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_02H
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_01H
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>CO_CANclearPendingSyncPDOs</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, co_driver_stm32.o(i.CO_CANclearPendingSyncPDOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_CANclearPendingSyncPDOs
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
</UL>

<P><STRONG><a name="[8d]"></a>CO_CANinit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, canopen.o(i.CO_CANinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CO_CANinit &rArr; CO_CANmodule_init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[90]"></a>CO_CANinterrupt_TX</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, co_driver_stm32.o(i.CO_CANinterrupt_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
</UL>

<P><STRONG><a name="[92]"></a>CO_CANmodule_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_driver_stm32.o(i.CO_CANmodule_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
</UL>

<P><STRONG><a name="[8f]"></a>CO_CANmodule_init</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, co_driver_stm32.o(i.CO_CANmodule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CO_CANmodule_init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
</UL>

<P><STRONG><a name="[ea]"></a>CO_CANmodule_process</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, co_driver_stm32.o(i.CO_CANmodule_process))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[96]"></a>CO_CANopenInit</STRONG> (Thumb, 558 bytes, Stack size 88 bytes, canopen.o(i.CO_CANopenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = CO_CANopenInit &rArr; CO_SDOserver_init &rArr; OD_set_u32 &rArr; OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LEDs_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[9f]"></a>CO_CANopenInitPDO</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, canopen.o(i.CO_CANopenInitPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[af]"></a>CO_CANrxBufferInit</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, co_driver_stm32.o(i.CO_CANrxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_setup
</UL>

<P><STRONG><a name="[a2]"></a>CO_CANsend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, co_driver_stm32.o(i.CO_CANsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_sendCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_process
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUpload
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownload
</UL>

<P><STRONG><a name="[8e]"></a>CO_CANsetConfigurationMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, co_driver_stm32.o(i.CO_CANsetConfigurationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_CANsetConfigurationMode &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
</UL>

<P><STRONG><a name="[a3]"></a>CO_CANsetNormalMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_driver_stm32.o(i.CO_CANsetNormalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_CANsetNormalMode &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[aa]"></a>CO_CANtxBufferInit</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, co_driver_stm32.o(i.CO_CANtxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_setup
</UL>

<P><STRONG><a name="[98]"></a>CO_EM_init</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, co_emergency.o(i.CO_EM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CO_EM_init &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[ab]"></a>CO_EM_process</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, co_emergency.o(i.CO_EM_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CO_EM_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[9a]"></a>CO_HBconsumer_init</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, co_hbconsumer.o(i.CO_HBconsumer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CO_HBconsumer_init &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[b0]"></a>CO_HBconsumer_process</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, co_hbconsumer.o(i.CO_HBconsumer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CO_HBconsumer_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[97]"></a>CO_LEDs_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, co_leds.o(i.CO_LEDs_init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[ec]"></a>CO_LEDs_process</STRONG> (Thumb, 618 bytes, Stack size 36 bytes, co_leds.o(i.CO_LEDs_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CO_LEDs_process
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[b1]"></a>CO_LSSinit</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, canopen.o(i.CO_LSSinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CO_LSSinit &rArr; CO_LSSslave_init &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[b2]"></a>CO_LSSslave_init</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, co_lssslave.o(i.CO_LSSslave_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CO_LSSslave_init &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSinit
</UL>

<P><STRONG><a name="[b3]"></a>CO_LSSslave_process</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, co_lssslave.o(i.CO_LSSslave_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CO_LSSslave_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[99]"></a>CO_NMT_init</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, co_nmt_heartbeat.o(i.CO_NMT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CO_NMT_init &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[b5]"></a>CO_NMT_process</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, co_nmt_heartbeat.o(i.CO_NMT_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CO_NMT_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_isError
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[b7]"></a>CO_NMT_sendCommand</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, co_nmt_heartbeat.o(i.CO_NMT_sendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CO_NMT_sendCommand &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNMTCommand
</UL>

<P><STRONG><a name="[a0]"></a>CO_RPDO_init</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, co_pdo.o(i.CO_RPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = CO_RPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
</UL>

<P><STRONG><a name="[be]"></a>CO_RPDO_process</STRONG> (Thumb, 454 bytes, Stack size 80 bytes, co_pdo.o(i.CO_RPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CO_RPDO_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
</UL>

<P><STRONG><a name="[c0]"></a>CO_SDOclientDownload</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, co_sdoclient.o(i.CO_SDOclientDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
</UL>

<P><STRONG><a name="[c2]"></a>CO_SDOclientDownloadBufWrite</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, co_sdoclient.o(i.CO_SDOclientDownloadBufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CO_SDOclientDownloadBufWrite &rArr; CO_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
</UL>

<P><STRONG><a name="[c4]"></a>CO_SDOclientDownloadInitiate</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, co_sdoclient.o(i.CO_SDOclientDownloadInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_SDOclientDownloadInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
</UL>

<P><STRONG><a name="[c6]"></a>CO_SDOclientUpload</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, co_sdoclient.o(i.CO_SDOclientUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>

<P><STRONG><a name="[c7]"></a>CO_SDOclientUploadBufRead</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, co_sdoclient.o(i.CO_SDOclientUploadBufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CO_SDOclientUploadBufRead &rArr; CO_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>

<P><STRONG><a name="[c8]"></a>CO_SDOclientUploadInitiate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, co_sdoclient.o(i.CO_SDOclientUploadInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_SDOclientUploadInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>

<P><STRONG><a name="[9c]"></a>CO_SDOclient_init</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, co_sdoclient.o(i.CO_SDOclient_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CO_SDOclient_init &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_fifo_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_setup
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[cd]"></a>CO_SDOclient_setup</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, co_sdoclient.o(i.CO_SDOclient_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CO_SDOclient_setup &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>

<P><STRONG><a name="[9b]"></a>CO_SDOserver_init</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, co_sdoserver.o(i.CO_SDOserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CO_SDOserver_init &rArr; OD_set_u32 &rArr; OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_u32
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[d1]"></a>CO_SDOserver_process</STRONG> (Thumb, 1592 bytes, Stack size 56 bytes, co_sdoserver.o(i.CO_SDOserver_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CO_SDOserver_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[9e]"></a>CO_SYNC_init</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, co_sync.o(i.CO_SYNC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CO_SYNC_init &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[db]"></a>CO_SYNC_process</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, co_sync.o(i.CO_SYNC_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CO_SYNC_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
</UL>

<P><STRONG><a name="[9d]"></a>CO_TIME_init</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, co_time.o(i.CO_TIME_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CO_TIME_init &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[dc]"></a>CO_TIME_process</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, co_time.o(i.CO_TIME_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CO_TIME_process &rArr; CO_getUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[a1]"></a>CO_TPDO_init</STRONG> (Thumb, 542 bytes, Stack size 88 bytes, co_pdo.o(i.CO_TPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
</UL>

<P><STRONG><a name="[df]"></a>CO_TPDO_process</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, co_pdo.o(i.CO_TPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
</UL>

<P><STRONG><a name="[e1]"></a>CO_delete</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, canopen.o(i.CO_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_delete &rArr; CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
</UL>

<P><STRONG><a name="[ac]"></a>CO_error</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, co_emergency.o(i.CO_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
</UL>

<P><STRONG><a name="[ca]"></a>CO_fifo_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_fifo.o(i.CO_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>

<P><STRONG><a name="[c1]"></a>CO_fifo_read</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, co_fifo.o(i.CO_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUploadBufRead
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownload
</UL>

<P><STRONG><a name="[c3]"></a>CO_fifo_write</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, co_fifo.o(i.CO_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUpload
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownloadBufWrite
</UL>

<P><STRONG><a name="[e7]"></a>CO_new</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, canopen.o(i.CO_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CO_new &rArr; CO_delete &rArr; CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
</UL>

<P><STRONG><a name="[e8]"></a>CO_process</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, canopen.o(i.CO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CO_process &rArr; CO_SDOserver_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_isError
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LEDs_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[ed]"></a>CO_process_RPDO</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, canopen.o(i.CO_process_RPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CO_process_RPDO &rArr; CO_RPDO_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[ee]"></a>CO_process_SYNC</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, canopen.o(i.CO_process_SYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CO_process_SYNC &rArr; CO_SYNC_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANclearPendingSyncPDOs
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[f0]"></a>CO_process_TPDO</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, canopen.o(i.CO_process_TPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[151]"></a>CRC16_Modbus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, user_lib.o(i.CRC16_Modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_Poll
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>

<P><STRONG><a name="[17a]"></a>ComToUart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modbus_usart.o(i.ComToUart))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsp_PutKey
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsp_PutKey
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fb]"></a>EventRecorderEnable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[f9]"></a>EventRecorderInitialize</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, eventrecorder.o(i.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EventRecorderInitialize &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>EventRecorderStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eventrecorder.o(i.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>EventRecorderTimerGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGet))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[fc]"></a>EventRecorderTimerInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[95]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[186]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>

<P><STRONG><a name="[94]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>

<P><STRONG><a name="[185]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>

<P><STRONG><a name="[8c]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_driver_stm32.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_driver_stm32.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback &rArr; prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetNormalMode
</UL>

<P><STRONG><a name="[93]"></a>HAL_CAN_Stop</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
</UL>

<P><STRONG><a name="[ff]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_driver_stm32.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_driver_stm32.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_driver_stm32.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_DMA_Abort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>

<P><STRONG><a name="[114]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, key.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; bsp_PutKey
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsp_PutKey
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[115]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[15f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[130]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[117]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[10f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[118]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[124]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[125]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[136]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[132]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
</UL>

<P><STRONG><a name="[13b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[13d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>MODS_Poll</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MODS_Poll &rArr; MODS_AnalyzeApp &rArr; MODS_03H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Modbus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MODS_ReciveNew</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_ReciveNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MODS_ReciveNew &rArr; bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReciveNew
</UL>

<P><STRONG><a name="[80]"></a>MX_CAN1_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[15e]"></a>MX_GPIO_Init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>MX_TIM7_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>MX_UART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>OD_find</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, co_odinterface.o(i.OD_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[a6]"></a>OD_getPtr</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, co_odinterface.o(i.OD_getPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OD_getPtr &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[d4]"></a>OD_getSDOabCode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_odinterface.o(i.OD_getSDOabCode))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[d3]"></a>OD_getSub</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, co_odinterface.o(i.OD_getSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[a8]"></a>OD_get_value</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, co_odinterface.o(i.OD_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
</UL>

<P><STRONG><a name="[63]"></a>OD_readOriginal</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, co_odinterface.o(i.OD_readOriginal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OD_readOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>
<BR>[Address Reference Count : 8]<UL><LI> co_nmt_heartbeat.o(i.CO_NMT_init)
<LI> co_odinterface.o(i.OD_getSub)
<LI> co_pdo.o(i.CO_RPDO_init)
<LI> co_pdo.o(i.CO_TPDO_init)
<LI> co_sdoserver.o(i.CO_SDOserver_init)
<LI> co_hbconsumer.o(i.CO_HBconsumer_init)
<LI> co_sync.o(i.CO_SYNC_init)
<LI> co_time.o(i.CO_TIME_init)
</UL>
<P><STRONG><a name="[163]"></a>OD_set_value</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, co_odinterface.o(i.OD_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_u32
</UL>

<P><STRONG><a name="[60]"></a>OD_writeOriginal</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, co_odinterface.o(i.OD_writeOriginal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1017
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1012
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_emergency.o(i.CO_EM_init)
<LI> co_odinterface.o(i.OD_getSub)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>RS485_InitTXE</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, modbus_usart.o(i.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RS485_InitTXE &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[7e]"></a>RS485_ReciveNew</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, modbus_usart.o(i.RS485_ReciveNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_ReciveNew &rArr; MODS_ReciveNew &rArr; bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReciveNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_usart.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[7c]"></a>RS485_SendBefor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_usart.o(i.RS485_SendBefor))
<BR>[Address Reference Count : 1]<UL><LI> modbus_usart.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[158]"></a>RS485_SendBuf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, modbus_usart.o(i.RS485_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>

<P><STRONG><a name="[7d]"></a>RS485_SendOver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbus_usart.o(i.RS485_SendOver))
<BR>[Address Reference Count : 1]<UL><LI> modbus_usart.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>SendNMTCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canopen_operate.o(i.SendNMTCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendNMTCommand &rArr; CO_NMT_sendCommand &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_sendCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, modbus_tim.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, modbus_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19a]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[168]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNMTCommand
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdcc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setacc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed_taget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorspeed_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motor
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[182]"></a>bsp_GetKey</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, key.o(i.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>bsp_GetMsg</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, modbus_msg.o(i.bsp_GetMsg))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>bsp_InitHardTimer</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, modbus_tim.o(i.bsp_InitHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsp_InitHardTimer &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>bsp_InitUart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_usart.o(i.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsp_InitUart &rArr; InitHardUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartVarInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>bsp_PutKey</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key.o(i.bsp_PutKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[14f]"></a>bsp_PutMsg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, modbus_msg.o(i.bsp_PutMsg))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[140]"></a>bsp_SetUartParam</STRONG> (Thumb, 54 bytes, Stack size 88 bytes, modbus_usart.o(i.bsp_SetUartParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsp_SetUartParam &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[157]"></a>bsp_StartHardTimer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, modbus_tim.o(i.bsp_StartHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_StartHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReciveNew
</UL>

<P><STRONG><a name="[175]"></a>canopen_app_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, co_app_stm32.o(i.canopen_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>canopen_app_interrupt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, co_app_stm32.o(i.canopen_app_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[177]"></a>canopen_app_process</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, co_app_stm32.o(i.canopen_app_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>canopen_app_resetCommunication</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, co_app_stm32.o(i.canopen_app_resetCommunication))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = canopen_app_resetCommunication &rArr; CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetNormalMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSinit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
</UL>

<P><STRONG><a name="[166]"></a>comSendBuf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, modbus_usart.o(i.comSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendBuf
</UL>

<P><STRONG><a name="[7f]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[e2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
</UL>

<P><STRONG><a name="[17d]"></a>key_fifoinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, key.o(i.key_fifoinit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = main &rArr; canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstart
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_fifoinit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetMsg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_Poll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[17f]"></a>motor_05h</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, jawd_speed.o(i.motor_05h))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = motor_05h &rArr; enable_motor &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstart
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNMTCommand
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorspeed_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>motorspeed_init</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, jawd_speed.o(i.motorspeed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = motorspeed_init &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
</UL>

<P><STRONG><a name="[180]"></a>motorstart</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, jawd_speed.o(i.motorstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = motorstart &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>motorstop</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jawd_speed.o(i.motorstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = motorstop &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>read_SDO</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, canopen_operate.o(i.read_SDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_setup
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUploadInitiate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUploadBufRead
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUpload
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed_taget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdcc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readacc
</UL>

<P><STRONG><a name="[153]"></a>readacc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, jawd_speed.o(i.readacc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = readacc &rArr; read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>

<P><STRONG><a name="[154]"></a>readdcc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, jawd_speed.o(i.readdcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = readdcc &rArr; read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>

<P><STRONG><a name="[155]"></a>readspeed</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, jawd_speed.o(i.readspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = readspeed &rArr; read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>

<P><STRONG><a name="[152]"></a>readspeed_taget</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, jawd_speed.o(i.readspeed_taget))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = readspeed_taget &rArr; read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>

<P><STRONG><a name="[15b]"></a>setacc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jawd_speed.o(i.setacc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = setacc &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[15c]"></a>setdcc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jawd_speed.o(i.setdcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = setdcc &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[159]"></a>setspeed_1</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, jawd_speed.o(i.setspeed_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = setspeed_1 &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[15a]"></a>setspeed_2</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, jawd_speed.o(i.setspeed_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = setspeed_2 &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
</UL>

<P><STRONG><a name="[17c]"></a>write_SDO</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, canopen_operate.o(i.write_SDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_setup
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownloadInitiate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownloadBufWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownload
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorstart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdcc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setacc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorspeed_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motor
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[120]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[76]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[134]"></a>UART_EndRxTransfer</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>UART_Receive_IT</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[138]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[f1]"></a>CO_setUint32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, co_emergency.o(i.CO_setUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_setUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1014_default
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1003
</UL>

<P><STRONG><a name="[a9]"></a>OD_extension_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_emergency.o(i.OD_extension_init))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[a7]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_emergency.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[61]"></a>OD_read_1003</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, co_emergency.o(i.OD_read_1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OD_read_1003 &rArr; CO_setUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(i.CO_EM_init)
</UL>
<P><STRONG><a name="[5f]"></a>OD_read_1014_default</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, co_emergency.o(i.OD_read_1014_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OD_read_1014_default &rArr; CO_setUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(i.CO_EM_init)
</UL>
<P><STRONG><a name="[62]"></a>OD_write_1003</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, co_emergency.o(i.OD_write_1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OD_write_1003 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(i.CO_EM_init)
</UL>
<P><STRONG><a name="[65]"></a>CO_HBcons_receive</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, co_hbconsumer.o(i.CO_HBcons_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_HBcons_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(i.CO_HBconsumer_initEntry)
</UL>
<P><STRONG><a name="[ae]"></a>CO_HBconsumer_initEntry</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, co_hbconsumer.o(i.CO_HBconsumer_initEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CO_HBconsumer_initEntry &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
</UL>

<P><STRONG><a name="[ad]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_hbconsumer.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
</UL>

<P><STRONG><a name="[64]"></a>OD_write_1016</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, co_hbconsumer.o(i.OD_write_1016))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OD_write_1016 &rArr; CO_HBconsumer_initEntry &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(i.CO_HBconsumer_init)
</UL>
<P><STRONG><a name="[68]"></a>CO_NMT_receive</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, co_nmt_heartbeat.o(i.CO_NMT_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_NMT_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_nmt_heartbeat.o(i.CO_NMT_init)
</UL>
<P><STRONG><a name="[b6]"></a>CO_isError</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, co_nmt_heartbeat.o(i.CO_isError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
</UL>

<P><STRONG><a name="[b4]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_nmt_heartbeat.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
</UL>

<P><STRONG><a name="[67]"></a>OD_write_1017</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, co_nmt_heartbeat.o(i.OD_write_1017))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OD_write_1017 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_nmt_heartbeat.o(i.CO_NMT_init)
</UL>
<P><STRONG><a name="[78]"></a>OD_readDisabled</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, co_odinterface.o(i.OD_readDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_readDisabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_odinterface.o(i.OD_getSub)
</UL>
<P><STRONG><a name="[79]"></a>OD_writeDisabled</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, co_odinterface.o(i.OD_writeDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_writeDisabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_odinterface.o(i.OD_getSub)
</UL>
<P><STRONG><a name="[69]"></a>CO_PDO_receive</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, co_pdo.o(i.CO_PDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_PDO_receive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(i.CO_RPDO_init)
<LI> co_pdo.o(i.OD_write_14xx)
</UL>
<P><STRONG><a name="[e0]"></a>CO_TPDOsend</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, co_pdo.o(i.CO_TPDOsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
</UL>

<P><STRONG><a name="[e3]"></a>CO_getUint16</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, co_pdo.o(i.CO_getUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_getUint16 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
</UL>

<P><STRONG><a name="[e4]"></a>CO_getUint32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, co_pdo.o(i.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_getUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>

<P><STRONG><a name="[e6]"></a>CO_getUint8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, co_pdo.o(i.CO_getUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_getUint8 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
</UL>

<P><STRONG><a name="[f2]"></a>CO_setUint32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, co_pdo.o(i.CO_setUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_setUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>

<P><STRONG><a name="[bd]"></a>OD_extension_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_pdo.o(i.OD_extension_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[ba]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_pdo.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[bc]"></a>OD_get_u16</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_pdo.o(i.OD_get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u16 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[b9]"></a>OD_get_u32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_pdo.o(i.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[bb]"></a>OD_get_u8</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_pdo.o(i.OD_get_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[6a]"></a>OD_read_PDO_commParam</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, co_pdo.o(i.OD_read_PDO_commParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OD_read_PDO_commParam &rArr; OD_readOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_readOriginal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(i.CO_RPDO_init)
<LI> co_pdo.o(i.CO_TPDO_init)
</UL>
<P><STRONG><a name="[7a]"></a>OD_read_dummy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, co_pdo.o(i.OD_read_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OD_read_dummy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.PDOconfigMap)
</UL>
<P><STRONG><a name="[6b]"></a>OD_write_14xx</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, co_pdo.o(i.OD_write_14xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OD_write_14xx &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_RPDO_init)
</UL>
<P><STRONG><a name="[75]"></a>OD_write_18xx</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, co_pdo.o(i.OD_write_18xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OD_write_18xx &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_TPDO_init)
</UL>
<P><STRONG><a name="[6c]"></a>OD_write_PDO_mapping</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, co_pdo.o(i.OD_write_PDO_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OD_write_PDO_mapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(i.CO_RPDO_init)
<LI> co_pdo.o(i.CO_TPDO_init)
</UL>
<P><STRONG><a name="[7b]"></a>OD_write_dummy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, co_pdo.o(i.OD_write_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_write_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.PDOconfigMap)
</UL>
<P><STRONG><a name="[b8]"></a>PDO_initMapping</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, co_pdo.o(i.PDO_initMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PDO_initMapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[164]"></a>PDOconfigMap</STRONG> (Thumb, 248 bytes, Stack size 96 bytes, co_pdo.o(i.PDOconfigMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
</UL>

<P><STRONG><a name="[6d]"></a>CO_SDOclient_receive</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, co_sdoclient.o(i.CO_SDOclient_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_SDOclient_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdoclient.o(i.CO_SDOclient_setup)
</UL>
<P><STRONG><a name="[c5]"></a>CO_fifo_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, co_sdoclient.o(i.CO_fifo_reset))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientUploadInitiate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclientDownloadInitiate
</UL>

<P><STRONG><a name="[c9]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_sdoclient.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>

<P><STRONG><a name="[cc]"></a>OD_get_u32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_sdoclient.o(i.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>

<P><STRONG><a name="[cb]"></a>OD_get_u8</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_sdoclient.o(i.OD_get_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOclient_init
</UL>

<P><STRONG><a name="[6f]"></a>CO_SDO_receive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, co_sdoserver.o(i.CO_SDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_SDO_receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdoserver.o(i.CO_SDOserver_init_canRxTx)
</UL>
<P><STRONG><a name="[d0]"></a>CO_SDOserver_init_canRxTx</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, co_sdoserver.o(i.CO_SDOserver_init_canRxTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CO_SDOserver_init_canRxTx &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>

<P><STRONG><a name="[e5]"></a>CO_getUint32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, co_sdoserver.o(i.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_getUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>

<P><STRONG><a name="[cf]"></a>OD_get_u32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, co_sdoserver.o(i.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[d7]"></a>OD_mappable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_sdoserver.o(i.OD_mappable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[ce]"></a>OD_set_u32</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, co_sdoserver.o(i.OD_set_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OD_set_u32 &rArr; OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[6e]"></a>OD_write_1201_additional</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, co_sdoserver.o(i.OD_write_1201_additional))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OD_write_1201_additional &rArr; CO_SDOserver_init_canRxTx &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdoserver.o(i.CO_SDOserver_init)
</UL>
<P><STRONG><a name="[d5]"></a>readFromOd</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, co_sdoserver.o(i.readFromOd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readFromOd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[d8]"></a>validateAndWriteToOD</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, co_sdoserver.o(i.validateAndWriteToOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = validateAndWriteToOD
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[72]"></a>CO_SYNC_receive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_sync.o(i.CO_SYNC_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_SYNC_receive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_sync.o(i.OD_write_1005)
<LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[da]"></a>OD_extension_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_sync.o(i.OD_extension_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[d9]"></a>OD_getIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_sync.o(i.OD_getIndex))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[70]"></a>OD_write_1005</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, co_sync.o(i.OD_write_1005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OD_write_1005 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[71]"></a>OD_write_1019</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, co_sync.o(i.OD_write_1019))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OD_write_1019 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[74]"></a>CO_TIME_receive</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, co_time.o(i.CO_TIME_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_TIME_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_time.o(i.CO_TIME_init)
</UL>
<P><STRONG><a name="[dd]"></a>CO_getUint32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, co_time.o(i.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_getUint32 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1012
</UL>

<P><STRONG><a name="[73]"></a>OD_write_1012</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, co_time.o(i.OD_write_1012))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OD_write_1012 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_time.o(i.CO_TIME_init)
</UL>
<P><STRONG><a name="[66]"></a>CO_LSSslave_receive</STRONG> (Thumb, 420 bytes, Stack size 44 bytes, co_lssslave.o(i.CO_LSSslave_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CO_LSSslave_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_lssslave.o(i.CO_LSSslave_init)
</UL>
<P><STRONG><a name="[e9]"></a>CO_NMT_getInternalState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canopen.o(i.CO_NMT_getInternalState))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[eb]"></a>CO_isError</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, canopen.o(i.CO_isError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[111]"></a>prv_read_can_received_msg</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, co_driver_stm32.o(i.prv_read_can_received_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[91]"></a>prv_send_can_message</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, co_driver_stm32.o(i.prv_send_can_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>

<P><STRONG><a name="[17b]"></a>enable_motor</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, jawd_speed.o(i.enable_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = enable_motor &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_SDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_05h
</UL>

<P><STRONG><a name="[13f]"></a>InitHardUart</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, modbus_usart.o(i.InitHardUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InitHardUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[16c]"></a>UartIRQ</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, modbus_usart.o(i.UartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>UartSend</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, modbus_usart.o(i.UartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[174]"></a>UartVarInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, modbus_usart.o(i.UartVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[16e]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_usart.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>

<P><STRONG><a name="[141]"></a>MODS_01H</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, modbus_slave.o(i.MODS_01H))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MODS_01H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[145]"></a>MODS_02H</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, modbus_slave.o(i.MODS_02H))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MODS_02H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[146]"></a>MODS_03H</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, modbus_slave.o(i.MODS_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MODS_03H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_ReadRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[148]"></a>MODS_04H</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, modbus_slave.o(i.MODS_04H))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MODS_04H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[149]"></a>MODS_05H</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_05H))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MODS_05H &rArr; MODS_SendAckOk &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[14b]"></a>MODS_06H</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_06H))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MODS_06H &rArr; MODS_SendAckOk &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[14d]"></a>MODS_10H</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, modbus_slave.o(i.MODS_10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MODS_10H &rArr; MODS_SendAckOk &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEBufToUint16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_WriteRegValue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
</UL>

<P><STRONG><a name="[14e]"></a>MODS_AnalyzeApp</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, modbus_slave.o(i.MODS_AnalyzeApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MODS_AnalyzeApp &rArr; MODS_03H &rArr; MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutMsg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_10H
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_05H
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_04H
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_02H
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_01H
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_Poll
</UL>

<P><STRONG><a name="[147]"></a>MODS_ReadRegValue</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_ReadRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MODS_ReadRegValue &rArr; readspeed_taget &rArr; read_SDO &rArr; CO_SDOclientUpload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed_taget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdcc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readacc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
</UL>

<P><STRONG><a name="[77]"></a>MODS_RxTimeOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_slave.o(i.MODS_RxTimeOut))
<BR>[Address Reference Count : 1]<UL><LI> modbus_slave.o(i.MODS_ReciveNew)
</UL>
<P><STRONG><a name="[144]"></a>MODS_SendAckErr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_SendAckErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MODS_SendAckErr &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_AnalyzeApp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_10H
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_05H
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_04H
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_02H
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_01H
</UL>

<P><STRONG><a name="[14a]"></a>MODS_SendAckOk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_SendAckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MODS_SendAckOk &rArr; MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendWithCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_10H
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_05H
</UL>

<P><STRONG><a name="[143]"></a>MODS_SendWithCRC</STRONG> (Thumb, 64 bytes, Stack size 144 bytes, modbus_slave.o(i.MODS_SendWithCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MODS_SendWithCRC &rArr; RS485_SendBuf &rArr; comSendBuf &rArr; UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Modbus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendBuf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckOk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_SendAckErr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_04H
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_03H
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_02H
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_01H
</UL>

<P><STRONG><a name="[14c]"></a>MODS_WriteRegValue</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, modbus_slave.o(i.MODS_WriteRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MODS_WriteRegValue &rArr; setspeed_2 &rArr; write_SDO &rArr; CO_SDOclientDownload &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdcc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setacc
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_10H
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODS_06H
</UL>

<P><STRONG><a name="[f4]"></a>EventGetTS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventGetTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_xch32
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[f8]"></a>EventRecordItem</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[f7]"></a>atomic_inc32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eventrecorder.o(i.atomic_inc32))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[f6]"></a>atomic_xch32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(i.atomic_xch32))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[fa]"></a>crc16_ccitt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, eventrecorder.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[170]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
